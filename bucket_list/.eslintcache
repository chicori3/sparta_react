[{"/home/gichul/dev/sparta_react/bucket_list/src/BucketList.js":"1","/home/gichul/dev/sparta_react/bucket_list/src/App.js":"2","/home/gichul/dev/sparta_react/bucket_list/src/index.js":"3","/home/gichul/dev/sparta_react/bucket_list/src/Detail.js":"4","/home/gichul/dev/sparta_react/bucket_list/src/NotFound.js":"5","/home/gichul/dev/sparta_react/bucket_list/src/redux/modules/bucket.js":"6","/home/gichul/dev/sparta_react/bucket_list/src/Progress.js":"7","/home/gichul/dev/sparta_react/bucket_list/src/firebase.js":"8","/home/gichul/dev/sparta_react/bucket_list/src/redux/configStore.js":"9","/home/gichul/dev/sparta_react/bucket_list/src/Spinner.js":"10"},{"size":1314,"mtime":1611668831420,"results":"11","hashOfConfig":"12"},{"size":3785,"mtime":1612452969280,"results":"13","hashOfConfig":"12"},{"size":369,"mtime":1611665979580,"results":"14","hashOfConfig":"12"},{"size":1944,"mtime":1612261003860,"results":"15","hashOfConfig":"12"},{"size":295,"mtime":1611142049220,"results":"16","hashOfConfig":"12"},{"size":3699,"mtime":1612451371870,"results":"17","hashOfConfig":"12"},{"size":985,"mtime":1611667984360,"results":"18","hashOfConfig":"12"},{"size":530,"mtime":1611821177580,"results":"19","hashOfConfig":"12"},{"size":512,"mtime":1612242390590,"results":"20","hashOfConfig":"12"},{"size":492,"mtime":1612446300890,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ueur8c",{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gichul/dev/sparta_react/bucket_list/src/BucketList.js",["43"],"/home/gichul/dev/sparta_react/bucket_list/src/App.js",["44","45","46"],"/home/gichul/dev/sparta_react/bucket_list/src/index.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/Detail.js",["47","48"],"/home/gichul/dev/sparta_react/bucket_list/src/NotFound.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/redux/modules/bucket.js",["49"],"import { firestore } from \"../../firebase\";\n\nconst bucket_db = firestore.collection(\"bucket\");\n\n// Actions\nconst LOAD = \"bucket/LOAD\";\nconst CREATE = \"bucket/CREATE\";\nconst DELETE = \"bucket/DELETE\";\nconst UPDATE = \"bucket/UPDATE\";\nconst LOADED = \"bucket/LOADED\";\n\n// 초기값 설정\nconst initialState = {\n  list: [\n    { text: \"리액트 공부\", completed: false },\n    { text: \"매일 책읽기\", completed: false },\n    { text: \"넷플릭스 보기\", completed: false },\n  ],\n  is_loaded: false,\n};\n\n// Action 생성 함수\nexport const loadBucket = (bucket) => {\n  return { type: LOAD, bucket };\n};\n\nexport const createBucket = (bucket) => {\n  return { type: CREATE, bucket };\n};\n\nexport const deleteBucket = (bucket) => {\n  return { type: DELETE, bucket };\n};\n\nexport const updateBucket = (bucket) => {\n  return { type: UPDATE, bucket };\n};\n\nexport const isLoaded = (loaded) => {\n  return { type: LOADED, loaded };\n};\n\n// firestore 통신\nexport const loadBucketFB = () => {\n  return function (dispatch) {\n    bucket_db.get().then((docs) => {\n      let bucket_data = [];\n\n      docs.forEach((doc) => {\n        if (doc.exists) {\n          bucket_data = [...bucket_data, { id: doc.id, ...doc.data() }];\n        }\n      });\n\n      dispatch(loadBucket(bucket_data));\n    });\n  };\n};\n\nexport const addBucketFB = (bucket) => {\n  return function (dispatch) {\n    let bucket_data = { text: bucket, completed: false };\n\n    dispatch(isLoaded(false));\n\n    bucket_db.add(bucket_data).then((docRef) => {\n      bucket_data = { ...bucket_data, id: docRef.id };\n      dispatch(createBucket(bucket_data));\n      setTimeout(() => dispatch(isLoaded(true)), 300);\n    });\n  };\n};\n\nexport const updateBucketFB = (index) => {\n  return function (dispatch, getState) {\n    const _bucket_data = getState().bucket.list[index];\n\n    dispatch(isLoaded(false));\n\n    let bucket_data = { ..._bucket_data, completed: true };\n\n    if (!bucket_data.id) {\n      return;\n    }\n\n    bucket_db\n      .doc(bucket_data.id)\n      .update(bucket_data)\n      .then((docRef) => {\n        dispatch(updateBucket(index));\n        setTimeout(() => dispatch(isLoaded(true)), 300);\n      })\n      .catch((error) => console.log(error));\n  };\n};\n\nexport const deleteBucketFB = (index) => {\n  return function (dispatch, getState) {\n    const _bucket_data = getState().bucket.list[index];\n    dispatch(isLoaded(false));\n\n    if (!_bucket_data.id) {\n      return;\n    }\n\n    bucket_db\n      .doc(_bucket_data.id)\n      .delete()\n      .then((docRef) => {\n        dispatch(deleteBucket(index));\n        setTimeout(() => dispatch(isLoaded(true)), 300);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"bucket/LOAD\": {\n      if (action.bucket.length >= 0) {\n        return { list: action.bucket, is_loaded: true };\n      }\n\n      return state;\n    }\n\n    case \"bucket/CREATE\":\n      const new_bucket_list = [...state.list, action.bucket];\n      return { list: new_bucket_list };\n\n    case \"bucket/DELETE\":\n      const bucket_list = state.list.filter((l, index) => {\n        if (index !== action.bucket) {\n          return l;\n        }\n      });\n      return { list: bucket_list };\n\n    case \"bucket/UPDATE\":\n      const update_bucket_list = state.list.map((l, index) => {\n        if (index === action.bucket) {\n          return { ...l, completed: true };\n        } else {\n          return l;\n        }\n      });\n      return { list: update_bucket_list };\n\n    case \"bucket/LOADED\":\n      return { ...state, is_loaded: action.loaded };\n\n    default:\n      return state;\n  }\n}\n","/home/gichul/dev/sparta_react/bucket_list/src/Progress.js",["50","51"],"/home/gichul/dev/sparta_react/bucket_list/src/firebase.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/redux/configStore.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/Spinner.js",[],{"ruleId":"52","severity":1,"message":"53","line":6,"column":10,"nodeType":"54","messageId":"55","endLine":6,"endColumn":21},{"ruleId":"52","severity":1,"message":"56","line":13,"column":3,"nodeType":"54","messageId":"55","endLine":13,"endColumn":13},{"ruleId":"52","severity":1,"message":"57","line":14,"column":3,"nodeType":"54","messageId":"55","endLine":14,"endColumn":15},{"ruleId":"52","severity":1,"message":"58","line":19,"column":10,"nodeType":"54","messageId":"55","endLine":19,"endColumn":19},{"ruleId":"52","severity":1,"message":"59","line":13,"column":3,"nodeType":"54","messageId":"55","endLine":13,"endColumn":15},{"ruleId":"52","severity":1,"message":"60","line":15,"column":3,"nodeType":"54","messageId":"55","endLine":15,"endColumn":15},{"ruleId":"61","severity":1,"message":"62","line":136,"column":56,"nodeType":"63","messageId":"64","endLine":136,"endColumn":58},{"ruleId":"52","severity":1,"message":"53","line":4,"column":23,"nodeType":"54","messageId":"55","endLine":4,"endColumn":34},{"ruleId":"61","severity":1,"message":"65","line":10,"column":30,"nodeType":"63","messageId":"66","endLine":10,"endColumn":32},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'loadBucket' is defined but never used.","'createBucket' is defined but never used.","'firestore' is defined but never used.","'deleteBucket' is defined but never used.","'updateBucket' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside"]