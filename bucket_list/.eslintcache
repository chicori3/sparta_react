[{"/home/gichul/dev/sparta_react/bucket_list/src/BucketList.js":"1","/home/gichul/dev/sparta_react/bucket_list/src/App.js":"2","/home/gichul/dev/sparta_react/bucket_list/src/index.js":"3","/home/gichul/dev/sparta_react/bucket_list/src/Detail.js":"4","/home/gichul/dev/sparta_react/bucket_list/src/NotFound.js":"5","/home/gichul/dev/sparta_react/bucket_list/src/redux/modules/bucket.js":"6","/home/gichul/dev/sparta_react/bucket_list/src/Progress.js":"7","/home/gichul/dev/sparta_react/bucket_list/src/firebase.js":"8","/home/gichul/dev/sparta_react/bucket_list/src/redux/configStore.js":"9"},{"size":1314,"mtime":1611668831420,"results":"10","hashOfConfig":"11"},{"size":4273,"mtime":1611925581810,"results":"12","hashOfConfig":"11"},{"size":369,"mtime":1611665979580,"results":"13","hashOfConfig":"11"},{"size":1716,"mtime":1611669907580,"results":"14","hashOfConfig":"11"},{"size":295,"mtime":1611142049220,"results":"15","hashOfConfig":"11"},{"size":1585,"mtime":1611663737090,"results":"16","hashOfConfig":"11"},{"size":985,"mtime":1611667984360,"results":"17","hashOfConfig":"11"},{"size":530,"mtime":1611821177580,"results":"18","hashOfConfig":"11"},{"size":343,"mtime":1611243876679,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ueur8c",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gichul/dev/sparta_react/bucket_list/src/BucketList.js",["39"],"/home/gichul/dev/sparta_react/bucket_list/src/App.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/index.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/Detail.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/NotFound.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/redux/modules/bucket.js",["40"],"// bucket.js\n\n// Actions\nconst LOAD = \"bucket/LOAD\";\nconst CREATE = \"bucket/CREATE\";\nconst DELETE = \"bucket/DELETE\";\nconst UPDATE = \"bucket/UPDATE\";\n\n// 초기값 설정\nconst initialState = {\n  list: [\n    { text: \"리액트 공부\", completed: false },\n    { text: \"매일 책읽기\", completed: false },\n    { text: \"넷플릭스 보기\", completed: false },\n  ],\n};\n\n// Action 생성 함수\nexport const loadBucket = (bucket) => {\n  return { type: LOAD, bucket };\n};\n\nexport const createBucket = (bucket) => {\n  return { type: CREATE, bucket };\n};\n\nexport const deleteBucket = (bucket) => {\n  return { type: DELETE, bucket };\n};\nexport const updateBucket = (bucket) => {\n  return { type: UPDATE, bucket };\n};\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // do reducer stuff\n    case \"bucket/LOAD\":\n      return state;\n\n    case \"bucket/CREATE\":\n      const new_bucket_list = [\n        ...state.list,\n        { text: action.bucket, completed: false },\n      ];\n      return { list: new_bucket_list };\n\n    case \"bucket/DELETE\":\n      const bucket_list = state.list.filter((l, index) => {\n        if (index !== action.bucket) {\n          return l;\n        }\n      });\n      return { list: bucket_list };\n\n    case \"bucket/UPDATE\":\n      const update_bucket_list = state.list.map((l, index) => {\n        if (index === action.bucket) {\n          return { ...l, completed: true };\n        } else {\n          return l;\n        }\n      });\n      return { list: update_bucket_list };\n\n    default:\n      return state;\n  }\n}\n","/home/gichul/dev/sparta_react/bucket_list/src/Progress.js",["41","42"],"/home/gichul/dev/sparta_react/bucket_list/src/firebase.js",[],"/home/gichul/dev/sparta_react/bucket_list/src/redux/configStore.js",[],{"ruleId":"43","severity":1,"message":"44","line":6,"column":10,"nodeType":"45","messageId":"46","endLine":6,"endColumn":21},{"ruleId":"47","severity":1,"message":"48","line":49,"column":56,"nodeType":"49","messageId":"50","endLine":49,"endColumn":58},{"ruleId":"43","severity":1,"message":"44","line":4,"column":23,"nodeType":"45","messageId":"46","endLine":4,"endColumn":34},{"ruleId":"47","severity":1,"message":"51","line":10,"column":30,"nodeType":"49","messageId":"52","endLine":10,"endColumn":32},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside"]