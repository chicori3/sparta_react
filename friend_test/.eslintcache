[{"/home/gichul/dev/sparta_react/friend_test/src/App.js":"1","/home/gichul/dev/sparta_react/friend_test/src/Message.js":"2","/home/gichul/dev/sparta_react/friend_test/src/SwipeItem.js":"3","/home/gichul/dev/sparta_react/friend_test/src/Start.js":"4","/home/gichul/dev/sparta_react/friend_test/src/Quiz.js":"5","/home/gichul/dev/sparta_react/friend_test/src/Score.js":"6","/home/gichul/dev/sparta_react/friend_test/src/redux/configStore.js":"7","/home/gichul/dev/sparta_react/friend_test/src/redux/modules/quiz.js":"8","/home/gichul/dev/sparta_react/friend_test/src/Ranking.js":"9"},{"size":1789,"mtime":1611387562500,"results":"10","hashOfConfig":"11"},{"size":2487,"mtime":1611495606984,"results":"12","hashOfConfig":"11"},{"size":4063,"mtime":1611384721170,"results":"13","hashOfConfig":"11"},{"size":1910,"mtime":1611387958180,"results":"14","hashOfConfig":"11"},{"size":2220,"mtime":1611488926494,"results":"15","hashOfConfig":"11"},{"size":2288,"mtime":1611494828844,"results":"16","hashOfConfig":"11"},{"size":337,"mtime":1611389875920,"results":"17","hashOfConfig":"11"},{"size":1370,"mtime":1611494199784,"results":"18","hashOfConfig":"11"},{"size":2590,"mtime":1611495767794,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ly0q6w",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gichul/dev/sparta_react/friend_test/src/App.js",[],"/home/gichul/dev/sparta_react/friend_test/src/Message.js",[],"/home/gichul/dev/sparta_react/friend_test/src/SwipeItem.js",["39","40","41","42","43"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport img from \"./pat.png\";\n\nconst SwipeItem = React.memo(({ onSwipe }) => {\n  const swipe_div = React.useRef();\n\n  let swipe_status = \"ready\"; // swipe 기본 상태 설정\n  let target_classname = \"\"; // 이벤트가 발생했을 때 줄 클래스\n  let coordinate = {\n    // 시작 좌표 설정\n    start_x: 0,\n    start_y: 0,\n    end_x: 0,\n    end_y: 0,\n  };\n\n  // useEffect Hook\n  React.useEffect(() => {\n    // 리셋값 설정\n    const reset = () => {\n      swipe_status = \"ready\";\n      coordinate = {\n        start_x: 0,\n        start_y: 0,\n        end_x: 0,\n        end_y: 0,\n      };\n\n      swipe_div.current.className = target_classname;\n      swipe_div.current.style.left = `${0}px`;\n      swipe_div.current.style.top = `${0}px`;\n    };\n\n    const touchStart = (e) => {\n      swipe_status = \"touchstart\";\n      target_classname = swipe_div.current.className;\n\n      // 터치 시작 시 좌표 저장\n      coordinate = {\n        ...coordinate,\n        start_x: e.touches[0].clientX,\n        start_y: e.touches[0].clientY,\n      };\n    };\n    const touchEnd = (e) => {\n      swipe_status = \"touchend\";\n\n      // touchStart로 인해 변경된 값을 구하는 changeTouches[]\n      coordinate = {\n        ...coordinate,\n        end_x: e.changedTouches[0].clientX,\n        end_y: e.changedTouches[0].clientY,\n      };\n\n      // x 좌표 이동 거리 구하기\n      let diff_x = coordinate.end_x - coordinate.start_x;\n      let direct = \"left\";\n\n      // Math.abs() 메서드는 절대값을 구함\n      if (Math.abs(diff_x) > 50) {\n        swipe_div.current.className = `${target_classname} swipe`;\n      }\n\n      // 움직인 방향에 transition 추가\n      if (diff_x > 0) {\n        direct = \"right\";\n        swipe_div.current.style.left = `${diff_x + 150}px`;\n        swipe_div.current.style.opacity = 0;\n      } else {\n        direct = \"left\";\n        swipe_div.current.style.left = `${diff_x - 150}px`;\n        swipe_div.current.style.opacity = 0;\n      }\n\n      // 3초 후 reset\n      window.setTimeout(() => {\n        reset();\n        onSwipe(direct);\n      }, 300);\n    };\n    const touchMove = (e) => {\n      // swipe 중 다른 이벤트 방지\n      e.preventDefault();\n\n      // 현재 이동 중인 좌표\n      let current_coordinate = {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY,\n      };\n\n      // 터치 중일 때 div가 따라 움직임\n      swipe_div.current.style.left = `${\n        current_coordinate.x - coordinate.start_x\n      }px`;\n      swipe_div.current.style.top = `${\n        current_coordinate.y - coordinate.start_y\n      }px`;\n    };\n\n    // 터치 이벤트가 취소될 경우 원상태로 reset\n    const touchCancle = (e) => {\n      swipe_status = \"cancle\";\n      reset();\n    };\n\n    swipe_div.current.addEventListener(\"touchstart\", touchStart);\n    swipe_div.current.addEventListener(\"touchend\", touchEnd);\n    swipe_div.current.addEventListener(\"touchmove\", touchMove);\n    swipe_div.current.addEventListener(\"touchcancle\", touchCancle);\n\n    // 이벤트 해제\n    return () => {\n      if (!swipe_div.current) {\n        return;\n      }\n      swipe_div.current.removeEventListener(\"touchstart\", touchStart);\n      swipe_div.current.removeEventListener(\"touchend\", touchEnd);\n      swipe_div.current.removeEventListener(\"touchmove\", touchMove);\n      swipe_div.current.removeEventListener(\"touchcancle\", touchCancle);\n    };\n  }, []);\n\n  return (\n    <DragItem ref={swipe_div}>\n      <img src={img} alt=\"pat\" />\n    </DragItem>\n  );\n});\n\nSwipeItem.defaultProps = {\n  onSwipe: () => {},\n};\n\nconst DragItem = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 10;\n\n  &.swipe {\n    transition: 300ms;\n  }\n  & > div {\n    text-align: center;\n    width: 170px;\n    background-color: #ffd6aa;\n    border-radius: 50%;\n  }\n  & img {\n    max-width: 120px;\n    opacity: 95%;\n  }\n`;\n\nexport default SwipeItem;\n","/home/gichul/dev/sparta_react/friend_test/src/Start.js",[],"/home/gichul/dev/sparta_react/friend_test/src/Quiz.js",["44","45","46"],"/home/gichul/dev/sparta_react/friend_test/src/Score.js",["47","48","49"],"/home/gichul/dev/sparta_react/friend_test/src/redux/configStore.js",[],"/home/gichul/dev/sparta_react/friend_test/src/redux/modules/quiz.js",[],"/home/gichul/dev/sparta_react/friend_test/src/Ranking.js",[],{"ruleId":"50","severity":1,"message":"51","line":22,"column":22,"nodeType":"52","endLine":22,"endColumn":29},{"ruleId":"50","severity":1,"message":"53","line":23,"column":20,"nodeType":"54","endLine":28,"endColumn":8},{"ruleId":"50","severity":1,"message":"55","line":37,"column":26,"nodeType":"56","endLine":37,"endColumn":53},{"ruleId":"57","severity":1,"message":"58","line":103,"column":7,"nodeType":"59","messageId":"60","endLine":103,"endColumn":19},{"ruleId":"50","severity":1,"message":"61","line":120,"column":17,"nodeType":"59","endLine":120,"endColumn":24},{"ruleId":"62","severity":1,"message":"63","line":37,"column":26,"nodeType":"64","messageId":"65","endLine":37,"endColumn":28},{"ruleId":"62","severity":1,"message":"63","line":48,"column":26,"nodeType":"64","messageId":"65","endLine":48,"endColumn":28},{"ruleId":"57","severity":1,"message":"66","line":91,"column":7,"nodeType":"59","messageId":"60","endLine":91,"endColumn":15},{"ruleId":"57","severity":1,"message":"67","line":4,"column":23,"nodeType":"59","messageId":"60","endLine":4,"endColumn":34},{"ruleId":"57","severity":1,"message":"68","line":5,"column":10,"nodeType":"59","messageId":"60","endLine":5,"endColumn":17},{"ruleId":"62","severity":1,"message":"69","line":23,"column":41,"nodeType":"64","messageId":"70","endLine":23,"endColumn":43},"react-hooks/exhaustive-deps","Assignments to the 'swipe_status' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","Assignments to the 'coordinate' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","ObjectExpression","Assignments to the 'target_classname' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","MemberExpression","no-unused-vars","'swipe_status' is assigned a value but never used.","Identifier","unusedVar","The ref value 'swipe_div.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'swipe_div.current' to a variable inside the effect, and use that variable in the cleanup function.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'DragItem' is assigned a value but never used.","'useDispatch' is defined but never used.","'addRank' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside"]