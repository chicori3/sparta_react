[{"/home/gichul/dev/sparta_react/quiz_2/src/App.js":"1","/home/gichul/dev/sparta_react/quiz_2/src/Score.js":"2","/home/gichul/dev/sparta_react/quiz_2/src/Quiz.js":"3","/home/gichul/dev/sparta_react/quiz_2/src/reportWebVitals.js":"4","/home/gichul/dev/sparta_react/quiz_2/src/Start.js":"5","/home/gichul/dev/sparta_react/quiz_2/src/SwipeItem.js":"6"},{"size":1182,"mtime":1610868044711,"results":"7","hashOfConfig":"8"},{"size":1291,"mtime":1610771771720,"results":"9","hashOfConfig":"8"},{"size":1813,"mtime":1610868081011,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":1610703333220,"results":"11","hashOfConfig":"8"},{"size":1490,"mtime":1610771600500,"results":"12","hashOfConfig":"8"},{"size":4063,"mtime":1610868833991,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dar045",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/gichul/dev/sparta_react/quiz_2/src/App.js",[],"/home/gichul/dev/sparta_react/quiz_2/src/Score.js",[],"/home/gichul/dev/sparta_react/quiz_2/src/Quiz.js",["26","27","28","29","30"],"/home/gichul/dev/sparta_react/quiz_2/src/reportWebVitals.js",[],"/home/gichul/dev/sparta_react/quiz_2/src/Start.js",[],"/home/gichul/dev/sparta_react/quiz_2/src/SwipeItem.js",["31","32","33","34","35"],{"ruleId":"36","severity":1,"message":"37","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":11},{"ruleId":"36","severity":1,"message":"40","line":4,"column":8,"nodeType":"38","messageId":"39","endLine":4,"endColumn":18},{"ruleId":"41","severity":1,"message":"42","line":21,"column":34,"nodeType":"43","messageId":"44","endLine":21,"endColumn":36},{"ruleId":"41","severity":1,"message":"42","line":31,"column":34,"nodeType":"43","messageId":"44","endLine":31,"endColumn":36},{"ruleId":"36","severity":1,"message":"45","line":74,"column":7,"nodeType":"38","messageId":"39","endLine":74,"endColumn":15},{"ruleId":"46","severity":1,"message":"47","line":22,"column":22,"nodeType":"48","endLine":22,"endColumn":29},{"ruleId":"46","severity":1,"message":"49","line":23,"column":20,"nodeType":"50","endLine":28,"endColumn":8},{"ruleId":"46","severity":1,"message":"51","line":37,"column":26,"nodeType":"52","endLine":37,"endColumn":53},{"ruleId":"36","severity":1,"message":"53","line":103,"column":7,"nodeType":"38","messageId":"39","endLine":103,"endColumn":19},{"ruleId":"46","severity":1,"message":"54","line":120,"column":17,"nodeType":"38","endLine":120,"endColumn":24},"no-unused-vars","'img' is defined but never used.","Identifier","unusedVar","'TinderCard' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'DragItem' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'swipe_status' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","Literal","Assignments to the 'coordinate' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","ObjectExpression","Assignments to the 'target_classname' variable from inside React Hook React.useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useEffect.","MemberExpression","'swipe_status' is assigned a value but never used.","The ref value 'swipe_div.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'swipe_div.current' to a variable inside the effect, and use that variable in the cleanup function."]